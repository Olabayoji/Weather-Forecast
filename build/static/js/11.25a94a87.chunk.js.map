{"version":3,"sources":["Firebase/Firebase.js","components/Auth/LogInForm.js","components/Auth/SignUpForm.js","components/Auth/AuthForm.js","pages/AuthPage.js","hooks/use-input.js","components/Auth/AuthForm.module.css"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","authentication","getAuth","LoginForm","feedback","navigate","useNavigate","dispatch","useDispatch","useInput","email","match","enteredEmail","value","emailIsValid","isValid","emailChangeHandler","valueChangeHandler","emailBlurHandler","inputBlurHandler","emailHasError","hasError","trim","length","enteredPassword","passwordIsValid","passwordChangeHandler","passwordBlurHandler","passwordHasError","resetPassword","reset","useState","isLoading","setIsLoading","authError","setAuthError","className","classes","formIsValid","emailInputClasses","control","invalid","passwordInputClasses","element","onClick","provider","GoogleAuthProvider","signInWithPopup","then","res","expirationTime","Date","getTime","_tokenResponse","expiresIn","authActions","logIn","token","idToken","expire","toISOString","catch","err","message","flex","onSubmit","event","preventDefault","fetch","method","body","JSON","stringify","password","returnSecureToken","headers","ok","json","data","errorMessage","error","Error","htmlFor","onChange","onBlur","type","id","required","to","style","bottom","position","actions","Loader","disabled","SignUpForm","useEffect","AuthForm","props","auth","params","LogInForm","container","Navbar","bg","expand","Container","Brand","AuthPage","useParams","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","target","module","exports"],"mappings":"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","file":"static/js/11.25a94a87.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCJJ7gB1xWDjeSmyj12tkqkgOjlwz2vCLc\",\n  authDomain: \"weather-app-cdd44.firebaseapp.com\",\n  projectId: \"weather-app-cdd44\",\n  storageBucket: \"weather-app-cdd44.appspot.com\",\n  messagingSenderId: \"201503788111\",\n  appId: \"1:201503788111:web:c26288c310fa63abf96e3a\",\n  measurementId: \"G-TTJX8CTF5F\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nexport const authentication = getAuth(app);\n","import React, { useState } from \"react\";\nimport { authentication } from \"../../Firebase/Firebase\";\nimport classes from \"./AuthForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport Loader from \"../UI/Loader\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { authActions } from \"../../store/auth-slice\";\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  // Validation for email\n  const emailValidation = (email) => {\n    const mailFormat = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email.match(mailFormat)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  //email instance of the input custom component\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    hasError: emailHasError,\n  } = useInput(emailValidation);\n\n  // password instance of the input custom component\n  const {\n    value: enteredPassword,\n    isValid: passwordIsValid,\n    valueChangeHandler: passwordChangeHandler,\n    inputBlurHandler: passwordBlurHandler,\n    hasError: passwordHasError,\n    reset: resetPassword,\n  } = useInput((value) => value.trim().length > 7);\n\n  // Login Handler\n  const [isLoading, setIsLoading] = useState(false);\n  const [authError, setAuthError] = useState(null);\n\n  const loginHandler = (event) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCJJ7gB1xWDjeSmyj12tkqkgOjlwz2vCLc\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = \"Authentication Failed\";\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const expirationTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        );\n        dispatch(\n          authActions.logIn({\n            token: data.idToken,\n            expire: expirationTime.toISOString(),\n          })\n        );\n        navigate(\"/\");\n      })\n      .catch((err) => {\n        // console.log(err.message);\n        setAuthError(err.message);\n        resetPassword();\n      });\n  };\n  // Login with google handler\n  const loginWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(authentication, provider)\n      .then((res) => {\n        const expirationTime = new Date(\n          new Date().getTime() + +res._tokenResponse.expiresIn * 1000\n        );\n        dispatch(\n          authActions.logIn({\n            token: res._tokenResponse.idToken,\n            expire: expirationTime.toISOString(),\n          })\n        );\n        navigate(\"/\");\n      })\n      .catch((err) => {\n        setAuthError(err.message);\n      });\n  };\n\n  // User feedback when authentication process is not successful\n  let feedback;\n  if (authError === \"EMAIL_NOT_FOUND\") {\n    feedback = <p className={classes[\"error-text\"]}>Email is not registered</p>;\n  } else if (authError === \"INVALID_PASSWORD\") {\n    feedback = <p className={classes[\"error-text\"]}>Invalid password</p>;\n  } else if (authError !== \"\") {\n    feedback = <p className={classes[\"error-text\"]}>{authError}</p>;\n  }\n\n  // check if form is valid\n  let formIsValid = false;\n  if (passwordIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  // Dynamic class for the email input field\n  const emailInputClasses = emailHasError\n    ? `${classes.control} ${classes.invalid} `\n    : classes.control;\n\n  // Dynamic class for the password input field\n  const passwordInputClasses = passwordHasError\n    ? `${classes.control} ${classes.invalid} `\n    : classes.control;\n  return (\n    <div className={classes.element}>\n      <h1>Welcome Back</h1>\n      <button onClick={loginWithGoogle} className=\"btn\">\n        <div className={classes.flex}>\n          <FcGoogle />\n          Log in with Google\n        </div>\n      </button>\n      <div className=\"separator\">or</div>\n\n      {/* Login form */}\n      <form onSubmit={loginHandler}>\n        <div className={emailInputClasses}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            value={enteredEmail}\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n            type=\"email\"\n            id=\"email\"\n            required\n          />\n          {emailHasError && (\n            <p className={classes[\"error-text\"]}>Kindly enter a valid email</p>\n          )}\n        </div>\n        <div className={passwordInputClasses}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={passwordBlurHandler}\n            type=\"password\"\n            id=\"password\"\n            required\n          />\n          <Link to=\"/reset-password\">Forgot password?</Link>\n          {passwordHasError && (\n            <p\n              style={{ bottom: \"2em\", position: \"relative\" }}\n              className={classes[\"error-text\"]}\n            >\n              Kindly enter a valid password\n            </p>\n          )}\n        </div>\n        <div className={classes.actions}>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <button disabled={!formIsValid}>Login</button>\n          )}\n          {feedback}\n          <p>\n            Do not have an account? <Link to=\"/signup\">Sign up</Link>\n          </p>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from \"react\";\nimport classes from \"./AuthForm.module.css\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport useInput from \"../../hooks/use-input\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { authActions } from \"../../store/auth-slice\";\nimport { useDispatch } from \"react-redux\";\nimport Loader from \"../UI/Loader\";\nimport { authentication } from \"../../Firebase/Firebase\";\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nconst SignUpForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  // validation for the entered email\n  const emailValidation = (email) => {\n    const mailFormat = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email.match(mailFormat)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // email input field instance of the custom component\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    hasError: emailHasError,\n  } = useInput(emailValidation);\n\n  // password input field instance of the custom component\n  const {\n    value: enteredPassword,\n    isValid: passwordIsValid,\n    valueChangeHandler: passwordChangeHandler,\n    inputBlurHandler: passwordBlurHandler,\n    hasError: passwordHasError,\n    reset: resetPassword,\n  } = useInput((value) => value.trim().length > 7);\n\n  // Login Handler\n  const [isLoading, setIsLoading] = useState(false);\n  const [authError, setAuthError] = useState(null);\n  const signUpHandler = (event) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCJJ7gB1xWDjeSmyj12tkqkgOjlwz2vCLc\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = \"Authentication Failed\";\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const expirationTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        );\n        dispatch(\n          authActions.logIn({\n            token: data.idToken,\n            expire: expirationTime.toISOString(),\n          })\n        );\n        navigate(\"/\");\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setAuthError(err.message);\n        resetPassword();\n      });\n  };\n\n  // Signup with google handler\n  const signupWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(authentication, provider)\n      .then((res) => {\n        const expirationTime = new Date(\n          new Date().getTime() + +res._tokenResponse.expiresIn * 1000\n        );\n        dispatch(\n          authActions.logIn({\n            token: res._tokenResponse.idToken,\n            expire: expirationTime.toISOString(),\n          })\n        );\n        navigate(\"/\");\n      })\n      .catch((err) => {\n        setAuthError(err.message);\n      });\n  };\n\n  let feedback;\n  if (authError === \"EMAIL_EXISTS\") {\n    feedback = (\n      <p className={classes[\"error-text\"]}>Email is already registered</p>\n    );\n  } else if (authError !== null) {\n    feedback = <p className={classes[\"error-text\"]}>Authentication failed</p>;\n  }\n  // Remove error when email changes\n  useEffect(() => {\n    setAuthError(null);\n  }, [enteredEmail]);\n\n  // check if form is valid\n  let formIsValid = false;\n  if (passwordIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  // Dynamically set class of email input field\n\n  const emailInputClasses = emailHasError\n    ? `${classes.control} ${classes.invalid} `\n    : classes.control;\n\n  // Dynamically set class of password input field\n  const passwordInputClasses = passwordHasError\n    ? `${classes.control} ${classes.invalid} `\n    : classes.control;\n  return (\n    <div className={classes.element}>\n      <h1>Get Started</h1>\n      <button onClick={signupWithGoogle} className=\"btn\">\n        <div className={classes.flex}>\n          <FcGoogle />\n          Sign up with Google\n        </div>\n      </button>\n\n      <div className=\"separator\">or</div>\n\n      {/* Signup form */}\n      <form onSubmit={signUpHandler}>\n        <div className={emailInputClasses}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            value={enteredEmail}\n            onChange={emailChangeHandler}\n            onBlur={emailBlurHandler}\n            type=\"email\"\n            id=\"email\"\n            required\n          />\n          {emailHasError && (\n            <p className={classes[\"error-text\"]}>Kindly enter a valid email</p>\n          )}\n        </div>\n        <div className={passwordInputClasses}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={passwordBlurHandler}\n            type=\"password\"\n            id=\"password\"\n            required\n          />\n          {passwordHasError && (\n            <p className={classes[\"error-text\"]}>\n              Kindly enter a valid password\n            </p>\n          )}\n        </div>\n        <div className={classes.actions}>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <button disabled={!formIsValid}>Sign up</button>\n          )}\n          {feedback}\n          <p>\n            Already have an account? <Link to=\"/login\">Sign in</Link>\n          </p>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default SignUpForm;\n","import React from \"react\";\nimport { Navbar, Container } from \"react-bootstrap\";\nimport LogInForm from \"./LogInForm\";\nimport SignUpForm from \"./SignUpForm\";\nimport classes from \"./AuthForm.module.css\";\nimport { Link } from \"react-router-dom\";\nconst AuthForm = (props) => {\n  let auth;\n  // Dynamically change what is rendered depending on the params prop\n  if (props.params === \"login\") {\n    auth = <LogInForm />;\n  }\n  if (props.params === \"signup\") {\n    auth = <SignUpForm />;\n  }\n\n  return (\n    <div className={classes.container}>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container>\n          <Link to=\"/\">\n            <Navbar.Brand className=\"logo\">Weatherly</Navbar.Brand>\n          </Link>\n        </Container>\n      </Navbar>\n      {auth}\n    </div>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from \"../components/Auth/AuthForm\";\nimport { useParams } from \"react-router-dom\";\nexport const AuthPage = () => {\n  const params = useParams().auth;\n  return <AuthForm params={params} />;\n};\n\nexport default AuthPage;\n","import { useState } from \"react\";\n\n// custom input field was created since same logic is shared\nconst useInput = (validateValue) => {\n  // validateValue is a callback function\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true);\n  };\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AuthForm_container__c83gh\",\"element\":\"AuthForm_element__7WXs6\",\"reset-form\":\"AuthForm_reset-form__10kf3\",\"control\":\"AuthForm_control__2fVSU\",\"invalid\":\"AuthForm_invalid__2xOpm\",\"actions\":\"AuthForm_actions__1VNhY\",\"action\":\"AuthForm_action__1YuFu\",\"toggle\":\"AuthForm_toggle__21tnB\",\"flex\":\"AuthForm_flex__2F0aW\",\"error-text\":\"AuthForm_error-text__3Gs2x\"};"],"sourceRoot":""}